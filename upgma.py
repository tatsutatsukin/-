# -*- coding: utf-8 -*-
"""UPGMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VSlW-jgWMQH1hScX3D-HyjNGu1fySVXh

受け取り：numpyの距離行列

出力：Newickフォーマット(str型)


説明：
"""

import numpy as np
import math

class UPGMA:

  def __init__(self, dist_matrix, name_list):
    self.newick = self.calculate(dist_matrix, name_list)


  def calculate(self, dist_matrix, name_list): #最小値が複数ある場合は先に出て来たペアがくっつくので改良の余地あり。ex)(A, B, C)みたいなのがない
    dist_matrix = dist_matrix.astype(np.float32)
    max_score = dist_matrix.max()
    num = len(name_list)
    for p in range(num):
      for q in range(p+1):
        dist_matrix[num-1-p, num-q-1] = max_score + 1

    while dist_matrix.shape[0] > 2:
      min_idx = np.unravel_index(np.argmin(dist_matrix), dist_matrix.shape)
      i = min_idx[0]
      j = min_idx[1]
      name_list[j] = '(' + name_list[j] + ', ' + name_list[i] + ')'
      name_list.pop(i)

      for p in range(dist_matrix.shape[0] - 1 - i):
        dist_matrix[i+p+1, j] = (dist_matrix[i+p+1, j] + dist_matrix[i+p+1, i]) / 2
      for p in range(i-j-1):
        dist_matrix[i-p-1, j] = (dist_matrix[i-p-1, j] + dist_matrix[i, i-p-1]) / 2
        #dist_matrix[j+1+p, j] = (dist_matrix[j+1+p, j] + dist_matrix[i, j+1+p]) / 2
      for p in range(j):
        dist_matrix[j, p] = (dist_matrix[i, p] + dist_matrix[j, p]) / 2

      #calを戻す、削除操作追加
      dist_matrix = np.delete(dist_matrix, i, 0)
      dist_matrix = np.delete(dist_matrix, i, 1)
    
    return name_list[0] + ', ' + name_list[1]


  def return_result(self):
    return self.newick